# syntax=docker/dockerfile:1.3
# FROM alpine:3.21 AS builder
FROM debian:bookworm-slim AS builder

RUN apt-get update && apt-get install -y \
    openssl \
    libssl-dev \
    build-essential \
    wget \
    git \
    libxml2-dev \
    libncurses5-dev \
    libncurses5 \
    cmake \
    libncursesw5-dev \
    libtinfo-dev \
    ninja-build \
    bash \
    clang \
    zlib1g-dev

ARG TARGETPLATFORM
ARG BUILDPLATFORM
ENV PLATFORM=$BUILDPLATFORM
RUN echo "Target: $TARGETPLATFORM"


WORKDIR /tarballs

COPY ./MacOSX15.2.sdk.tar.xz .
COPY ./MacOSX15.sdk.tar.xz .

# Set up OSXCross
WORKDIR /osxcross
RUN git clone https://github.com/tpoechtrager/osxcross.git .
RUN cp -f /tarballs/* /osxcross/tarballs

WORKDIR /osxcross/target
WORKDIR /osxcross

ENV PATH="/osxcross/target/bin:$PATH"
ENV UNATTENDED=1
ENV TARGET_DIR=/osxcross/target
ENV SDK_VERSION=15
#ENV OCDEBUG=1

RUN bash -c "TARGET_DIR=/osxcross/target ./build.sh"

# Set the target platform to arm64
ENV CC="gcc"
ENV CXX="g++"
ENV CFLAGS="-static -march=armv8-a"
ENV CXXFLAGS="-static -march=armv8-a"
ENV WCHAR_T_BITS=32
ENV LDFLAGS=-static
ENV VERSION='3.7.1'
#ENV LDFLAGS="-L/usr/lib"
#ENV CPPFLAGS="-I/usr/include"

RUN git clone --branch $VERSION --depth 1 https://github.com/fish-shell/fish-shell.git /tmp/fish

WORKDIR /tmp/fish

COPY CMakeLists2.txt .
COPY PCRE2.cmake .
COPY output.cpp .

# Apply patch
RUN cp -f CMakeLists2.txt CMakeLists.txt
RUN cp -f PCRE2.cmake cmake/PCRE2.cmake
RUN cp -f output.cpp src/output.cpp
#RUN cp -f /usr/lib/libtinfo.a /usr/lib/libtinfo.so

RUN cmake -G Ninja \
    -DBUILD_STATIC=ON \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
    -DFISH_USE_SYSTEM_PCRE2=ON \
    -DCURSES_LIBRARY="/usr/lib/libcurses.a" \
    -DCURSES_INCLUDE_DIR="/usr/include" \
    -DTINFO_LIBRARY="/usr/lib/libtinfo.a" \
    -DCMAKE_EXE_LINKER_FLAGS="-static" \
    -DPCRE2_LIBRARIES="/usr/lib/libpcre2-32.a" \
    -DPCRE2_INCLUDE_DIRS="/usr/include" \
    -DCMAKE_INSTALL_PREFIX=/usr/local . \
    -DCMAKE_TOOLCHAIN_FILE=/osxcross/target/bin/o64-clang \
    ..
RUN ninja
RUN ninja install
ENTRYPOINT ["fish"]
 
# # # Final stage for a clean binary
# # FROM scratch AS final
# # COPY --from=builder /usr/local/bin/fish /fish
# # ENTRYPOINT ["fish"]


ENTRYPOINT [ "bash" ]